from datetime import date, datetime

from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.callback_data import CallbackData

from config_parser import outline_prices
from utils import server as server_utils
import database as db
from utils.devices import get_days_text

device = CallbackData("device", "device_id")
delete_device = CallbackData("delete_device", "device_id")
delete_device_action = CallbackData("delete_device_action", "device_id", "action")
delete_device_approve = CallbackData("delete_device_approve", "device_id", "action")
new_device_country = CallbackData("new_device_country", "country_id")
payment = CallbackData("payment", "amount")
add_limit = CallbackData("add_limit", "device_id", "value")
accept_add_limit = CallbackData("accept_add_limit", "device_id", "value")
limit_data = CallbackData("limit", "value")
help_post = CallbackData("help_post", "post")
auto_renewal = CallbackData("auto_renewal", "device_id", "status")
resume_device = CallbackData("resume_device", "device_id")
accept_resume_device = CallbackData("accept_resume_device", "device_id", "action")
extend_device = CallbackData("extend", "device_id")
accept_extend_device = CallbackData("extend", "device_id", "action")
tg_pay = CallbackData("tg_pay", "amount")

inline_cancel = InlineKeyboardMarkup(row_width=1).add(InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="cancel"))

start = InlineKeyboardMarkup(row_width=1).add(InlineKeyboardButton("üéâ –ü–û–î–ö–õ–Æ–ß–ò–¢–¨ VPN üéâ", callback_data="show_menu"))

show_menu = InlineKeyboardMarkup(row_width=1).add(InlineKeyboardButton("üè†–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="show_menu"))

menu = InlineKeyboardMarkup(row_width=2).add(
    InlineKeyboardButton("üì±–ú–æ–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞", callback_data="devices")
).add(
    InlineKeyboardButton("üìπ –í–∏–¥–µ–æ–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏", callback_data="video_help")
).add(
    InlineKeyboardButton("üíµ–ü–æ–ø–æ–ª–Ω–∏—Ç—å", callback_data="balance_menu"),
    InlineKeyboardButton("üßç‚Äç‚ôÇÔ∏è–ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å", callback_data="ref_menu")

).add(InlineKeyboardButton("üßæ–ü–ª–∞—Ç–µ–∂–∏", callback_data="history"),
      InlineKeyboardButton("üìñ–ü–æ–º–æ—â—å", callback_data="help"))

choose_device_type = InlineKeyboardMarkup(row_width=2).add(
    InlineKeyboardButton("WireGuard", callback_data="wireguard"),
    InlineKeyboardButton("Outline", callback_data="outline")
)

balance_amounts = [100, 200, 300, 500, 1000, 2000]
balance = InlineKeyboardMarkup(row_width=3).add(
    *[InlineKeyboardButton(text=f"{amount}‚ÇΩ", callback_data=payment.new(amount)) for amount in balance_amounts])
balance.add(InlineKeyboardButton("–£–∫–∞–∑–∞—Ç—å —Å–≤–æ—é —Å—É–º–º—É", callback_data=payment.new(0)))

support = InlineKeyboardMarkup(row_width=1).add(
    InlineKeyboardButton("–ù–µ —Ä–∞–±–æ—Ç–∞–µ—Ç VPN", callback_data=help_post.new("no_work")),
    InlineKeyboardButton("–ù–∏–∑–∫–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å", callback_data=help_post.new("small_speed")),
    InlineKeyboardButton("–î—Ä—É–≥–æ–µ", callback_data=help_post.new("other")))

first_device = InlineKeyboardMarkup(row_width=1).add(
    InlineKeyboardButton("–î—Ä—É–≥–æ–µ", callback_data="first_device"))

help_menu = InlineKeyboardMarkup(row_width=1).add(
    InlineKeyboardButton("üõ†Ô∏è–¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞", url="https://t.me/obervpn_chat"),
    InlineKeyboardButton("üè†–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="show_menu")
)


async def get_devices(devices):
    kb = InlineKeyboardMarkup(row_width=2)
    for my_device in devices:
        device_type = "(WG)" if my_device["device_type"] == "wireguard" else "(OL)"
        days = (my_device["sub_time"] - datetime.today()).days
        if days == 0:
            days = 1
        day_text = get_days_text(days)
        limit = ""
        if my_device["device_type"] == "outline":
            server = await db.get_server(my_device["server_id"])
            outline_manager = server_utils.Outline(server["outline_url"], server["outline_sha"])
            outline_client = outline_manager.get_client(my_device["outline_id"])
            outline_client_usage = outline_manager.get_usage_data(outline_client["id"])
            usage_gb = outline_client_usage // (1000 ** 3)
            limit = f"({usage_gb}/{my_device['outline_limit']}–ì–ë)"
        kb.add(InlineKeyboardButton(f"{device_type}({days} {day_text}){limit} {my_device['name']}",
                                    callback_data=device.new(my_device["device_id"])))
    kb.add(InlineKeyboardButton("‚ùå –£–¥–∞–ª–µ–Ω–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤", callback_data="delete_device"))
    kb.add(InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ", callback_data="new_device"))
    kb.add(InlineKeyboardButton("üè†–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="show_menu"))
    return kb


def get_countries(countries):
    kb = InlineKeyboardMarkup(row_width=1)
    for country in countries:
        kb.add(InlineKeyboardButton(country["name"], callback_data=new_device_country.new(country["country_id"])))
    return kb


async def get_delete_devices(devices):
    kb = InlineKeyboardMarkup(row_width=2)
    for my_device in devices:
        device_type = "(WG)" if my_device["device_type"] == "wireguard" else "(OL)"
        days = (my_device["sub_time"] - datetime.today()).days
        if days == 0:
            days = 1
        day_text = get_days_text(days)
        limit = ""
        if my_device["device_type"] == "outline":
            server = await db.get_server(my_device["server_id"])
            outline_manager = server_utils.Outline(server["outline_url"], server["outline_sha"])
            outline_client = outline_manager.get_client(my_device["outline_id"])
            outline_client_usage = outline_manager.get_usage_data(outline_client["id"])
            usage_gb = outline_client_usage // (1000 ** 3)
            limit = f"({usage_gb}/{my_device['outline_limit']})"
        kb.add(InlineKeyboardButton(f"{device_type}({days} {day_text}){limit} {my_device['name']}",
                                    callback_data=delete_device.new(my_device["device_id"])))
    kb.add(InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="devices"))
    kb.add(InlineKeyboardButton("üè†–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="show_menu"))
    return kb


def get_delete_device(device_id):
    kb = InlineKeyboardMarkup(row_width=1)
    kb.add(InlineKeyboardButton("‚ùå –í—Å—ë —Ä–∞–≤–Ω–æ —É–¥–∞–ª–∏—Ç—å", callback_data=delete_device_action.new(device_id, "approve")))
    kb.add(InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="devices"))
    kb.add(InlineKeyboardButton("üè†–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="show_menu"))
    return kb


def get_accept_delete_device(device_id):
    kb = InlineKeyboardMarkup(row_width=2)
    kb.add(InlineKeyboardButton("–î–∞", callback_data=delete_device_approve.new(device_id, "approve")),
           InlineKeyboardButton("–ù–µ—Ç", callback_data=delete_device_approve.new(device_id, "cancel")))
    return kb


def get_limit():
    kb = InlineKeyboardMarkup(row_width=1)
    kb.add(
        *[InlineKeyboardButton(product['name'],
                               callback_data=limit_data.new(product_id))
          for (product_id, product) in outline_prices.items()]
    )
    return kb


#
# def get_add_limit(device_id):
#     kb = InlineKeyboardMarkup(row_width=1)
#     for (amount, price) in outline_prices.items():
#         kb.add(InlineKeyboardButton(f"{amount} –ì–ë: {price} —Ä—É–±", callback_data=add_limit.new(device_id, amount)))
#     kb.add(InlineKeyboardButton("üè†–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="show_menu"))
#     return kb

def get_outline_device(device, is_active):
    kb = InlineKeyboardMarkup(row_width=1)
    if not is_active:
        kb.add(InlineKeyboardButton("–í–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å —Ç–∞—Ä–∏—Ñ", callback_data=resume_device.new(device["device_id"])))
    if device["has_auto_renewal"]:
        auto_renewal_text = "–û—Ç–∫–ª. –ê–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ"
    else:
        auto_renewal_text = "–í–∫–ª. –ê–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ"
    kb.add(InlineKeyboardButton(auto_renewal_text,
                                callback_data=auto_renewal.new(device["device_id"], not device["has_auto_renewal"])))
    kb.add(InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="devices"))
    kb.add(InlineKeyboardButton("üè†–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="show_menu"))
    return kb


def get_wg_device(device, is_active):
    kb = InlineKeyboardMarkup(row_width=1)
    if not is_active and not device["has_auto_renewal"]:
        kb.add(InlineKeyboardButton("–ü—Ä–æ–¥–ª–∏—Ç—å", callback_data=extend_device.new(device["device_id"])))
    if device["has_auto_renewal"]:
        auto_renewal_text = "–û—Ç–∫–ª. –ê–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ"
    else:
        auto_renewal_text = "–í–∫–ª. –ê–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ"
    kb.add(InlineKeyboardButton(auto_renewal_text,
                                callback_data=auto_renewal.new(device["device_id"], not device["has_auto_renewal"])))
    kb.add(InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="devices"))
    kb.add(InlineKeyboardButton("üè†–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="show_menu"))
    return kb


def get_accept_extend_device(device_id):
    kb = InlineKeyboardMarkup(row_width=1)
    kb.add(InlineKeyboardButton("–î–∞", callback_data=accept_extend_device.new(device_id, "approve")),
           InlineKeyboardButton("–ù–µ—Ç", callback_data=accept_extend_device.new(device_id, "cancel")))
    return kb


def get_accept_resume_device(device_id):
    kb = InlineKeyboardMarkup(row_width=1)
    kb.add(InlineKeyboardButton("–î–∞", callback_data=accept_resume_device.new(device_id, "approve")),
           InlineKeyboardButton("–ù–µ—Ç", callback_data=accept_resume_device.new(device_id, "cancel")))
    return kb


def get_accept_add_limit(device_id, amount):
    kb = InlineKeyboardMarkup(row_width=1)
    kb.add(InlineKeyboardButton("–î–∞", callback_data=accept_add_limit.new(device_id, amount)),
           InlineKeyboardButton("–ù–µ—Ç", callback_data=accept_add_limit.new(device_id, 0)))
    return kb


def get_payment_url(url, amount):
    kb = InlineKeyboardMarkup(row_width=1)
    kb.add(InlineKeyboardButton("–°–ü–ë", url=url))
    kb.add(InlineKeyboardButton("–ö–∞—Ä—Ç–æ–π", callback_data=tg_pay.new(amount)))
    return kb
