from aiogram.dispatcher import FSMContext
from aiogram.types import Message, CallbackQuery
from tabulate import tabulate

import database as db
import keyboards.user as user_kb
import utils.devices
from config_parser import BOT_NAME, wireguard_price
from create_bot import dp

start_msgs = {"exists": """–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º –≤–∞—Å —Å–Ω–æ–≤–∞, {firstname}!

–ë–∞–ª–∞–Ω—Å {balance}‚ÇΩ (~{days} –¥–Ω–µ–π)
WireGuard {wireguard_status} ({wireguard_desc})
–ì–ë –≤ Outline –º–æ–∂–Ω–æ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ (—Å–ø–∏—Å–∞–Ω–∏–µ —Ä–∞–∑–æ–≤–æ–µ)
–ï—Å–ª–∏ –≤—ã —É–∂–µ –∫—É–ø–∏–ª–∏ –ì–ë –¥–ª—è Outline, –≤–∞—à –∫–ª—é—á –æ—Å—Ç–∞–Ω–µ—Ç—Å—è 
–∞–∫—Ç–∏–≤–Ω—ã–º, –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç –±–∞–ª–∞–Ω—Å–∞.

–ü—Ä–∏ –ø–æ—Ç–µ—Ä–µ QR-–∫–æ–¥–∞ –∏–ª–∏ –∫–æ–Ω—Ñ–∏–≥-—Ñ–∞–π–ª–∞, –∏—Ö –º–æ–∂–Ω–æ —Å–Ω–æ–≤–∞ 
—Å–∫–∞—á–∞—Ç—å –≤ —Ä–∞–∑–¥–µ–ª–µ "–ú–æ–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞".

<b>–í–ù–ò–ú–ê–ù–ò–ï!</b>
–ï—Å–ª–∏ WireGuard –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –≤ –≤–∞—à–µ–º —Ä–µ–≥–∏–æ–Ω–µ, 
—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Outline.

<b>–ò—Å–ø–æ–ª—å–∑—É—è –Ω–∞—à —Å–µ—Ä–≤–∏—Å, –≤—ã —Å–æ–≥–ª–∞—à–∞–µ—Ç–µ—Å—å —Å —Ç–µ–º, —á—Ç–æ –º—ã 
–Ω–µ –Ω–µ—Å–µ–º –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏ –∑–∞ –≤–∞—à–∏ –¥–µ–π—Å—Ç–≤–∏—è –≤ 
–∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ!</b>

üë≠ –ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ –¥—Ä—É–∑–µ–π –∏ –∑–∞—Ä–∞–±–æ—Ç–∞–π—Ç–µ 50‚ÇΩ –∑–∞ –∫–∞–∂–¥–æ–≥–æ, 
–ø–ª—é—Å –∫–∞–∂–¥—ã–π –≤–∞—à –¥—Ä—É–≥ –ø–æ–ª—É—á–∏—Ç 100‚ÇΩ –Ω–∞ –±–∞–ª–∞–Ω—Å!""",

              "new": """–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º –í–∞—Å, <b>{firstname}</b>!

–ü–æ–¥–∫–ª—é—á–∏—Ç–µ VPN –±–µ—Å–ø–ª–∞—Ç–Ω–æ! –î–∞—Ä–∏–º –≤–∞–º 100‚ÇΩ –Ω–∞ –±–∞–ª–∞–Ω—Å!

–í—ã—Å–æ–∫–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å
–°–≤–æ–±–æ–¥–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ —Å–∞–π—Ç–∞–º 
–£–¥–æ–±–Ω–∞—è —Ñ–æ—Ä–º–∞ –æ–ø–ª–∞—Ç—ã 
–ù–µ–≤—ã—Å–æ–∫–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å 
–ú—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–≤–∞ —Ç–∏–ø–∞ VPN - WireGuard –∏ Outline

‚¨áÔ∏è‚¨áÔ∏è‚¨áÔ∏è –ñ–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É! ‚¨áÔ∏è‚¨áÔ∏è‚¨áÔ∏è""",

              "new_invite": """"–ü—Ä–∏–≤–µ—Ç, <b>{firstname}</b>!

–í–∞—Å –ø—Ä–∏–≥–ª–∞—Å–∏–ª —Å—é–¥–∞ {inviter_firstname}, –ø–æ—ç—Ç–æ–º—É –æ–Ω –ø–æ–ª—É—á–∏–ª 50‚ÇΩ –Ω–∞ —Å–≤–æ–π –±–∞–ª–∞–Ω—Å!
–ê –º—ã –≤–∞–º –¥–∞—Ä–∏–º 100‚ÇΩ –Ω–∞ –±–∞–ª–∞–Ω—Å!

–í—ã—Å–æ–∫–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å
–°–≤–æ–±–æ–¥–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ —Å–∞–π—Ç–∞–º 
–£–¥–æ–±–Ω–∞—è —Ñ–æ—Ä–º–∞ –æ–ø–ª–∞—Ç—ã 
–ù–µ–≤—ã—Å–æ–∫–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å
–ú—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–≤–∞ —Ç–∏–ø–∞ VPN - WireGuard –∏ Outline

‚¨áÔ∏è‚¨áÔ∏è‚¨áÔ∏è –ñ–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É! ‚¨áÔ∏è‚¨áÔ∏è‚¨áÔ∏è"""}


@dp.message_handler(commands=['start'], state="*")
async def start_command(message: Message, state: FSMContext):
    await state.finish()
    user = await db.get_user(message.from_user.id)

    if user is None:
        kb = user_kb.start
        msg = start_msgs["new"].format(firstname=message.from_user.first_name)
        try:
            inviter_id = int(message.get_args())
        except ValueError:
            inviter_id = None
        else:
            if inviter_id == message.from_user.id:
                inviter_id = None
            else:
                inviter = await db.get_user(inviter_id)
                msg = start_msgs["new_invite"].format(firstname=message.from_user.first_name,
                                                      inviter_firstname=inviter["firstname"])
                await db.update_user_balance(inviter_id, 50)
                await db.add_history_record(inviter_id, 50, "–†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –±–æ–Ω—É—Å")
        user = await db.add_user(message.from_user.id, message.from_user.username, message.from_user.first_name,
                                 inviter_id)
    else:
        menu_stats = await utils.devices.get_stats_for_menu(user)
        msg = start_msgs["exists"].format(firstname=message.from_user.first_name, balance=user["balance"],
                                          days=menu_stats["days"],
                                          wireguard_status=menu_stats["wireguard_status"],
                                          wireguard_desc=menu_stats["wireguard_desc"])
        kb = user_kb.menu

    await message.answer(msg, reply_markup=kb)


@dp.message_handler(state="*", text="–û—Ç–º–µ–Ω–∞")
async def cancel(message: Message, state: FSMContext):
    await state.finish()
    await message.answer("–í–≤–æ–¥ –æ—Ç–º–µ–Ω–µ–Ω", reply_markup=user_kb.menu)


@dp.callback_query_handler(text="show_menu", state="*")
async def show_menu(call: CallbackQuery, state: FSMContext):
    await state.finish()
    user = await db.get_user(call.from_user.id)
    menu_stats = await utils.devices.get_stats_for_menu(user)
    msg = start_msgs["exists"].format(firstname=call.from_user.first_name, balance=user["balance"],
                                      days=menu_stats["days"],
                                      wireguard_status=menu_stats["wireguard_status"],
                                      wireguard_desc=menu_stats["wireguard_desc"])
    await call.message.answer(msg, reply_markup=user_kb.menu)
    await call.answer()


@dp.callback_query_handler(state="*", text="start_vpn")
async def start_vpn(call: CallbackQuery, state: FSMContext):
    await state.finish()
    await call.message.edit_text("""–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º, –í—ã –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª–∏ –∞–∫–∫–∞—É–Ω—Ç OberVPN, 100‚ÇΩ —É –≤–∞—Å –Ω–∞ –±–∞–ª–∞–Ω—Å–µ! 

–¢–µ–ø–µ—Ä—å –¥–∞–≤–∞–∏ÃÜ—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏–º –í–∞—à VPN.""", reply_markup=user_kb.add_device)


@dp.callback_query_handler(text="cancel", state="*")
async def inline_cancel(call: CallbackQuery, state: FSMContext):
    await state.finish()
    await call.message.edit_text("–í–≤–æ–¥ –æ—Ç–º–µ–Ω–µ–Ω", reply_markup=user_kb.show_menu)
    await call.answer()


@dp.callback_query_handler(text="ref_menu")
async def ref_menu(call: CallbackQuery, state: FSMContext):
    await call.message.answer(f"""–ü–æ—à–ª–∏—Ç–µ –¥—Ä—É–≥—É —Å—Å—ã–ª–∫—É:

https://t.me/{BOT_NAME}?start={call.from_user.id}

–ö–æ–≥–¥–∞ –≤–∞—à –¥—Ä—É–≥ –∑–∞–π–¥–µ—Ç –≤ –Ω–∞—à –±–æ—Ç –ø–æ —ç—Ç–æ–π —Å—Å—ã–ª–∫–µ –∏ —Å–æ–∑–¥–∞—Å—Ç –∞–∫–∫–∞—É–Ω—Ç, –≤—ã –ø–æ–ª—É—á–∏—Ç–µ 50‚ÇΩ –Ω–∞ –±–∞–ª–∞–Ω—Å!""",
                              reply_markup=user_kb.show_menu)
    await call.answer()


@dp.callback_query_handler(state="*", text="history")
async def history(call: CallbackQuery, state: FSMContext):
    history = await db.get_history_by_user_id(call.from_user.id)
    formatted_history = [
        {
            "datetime": row["datetime"],
            "amount": row["amount"],
            "msg": row["msg"]
        }
        for row in history]
    formatted_history.insert(0, {"datetime": "–î–∞—Ç–∞", "amount": "‚ÇΩ", "msg": "–¢–ò–ü"})
    await call.message.answer(
        f'<b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>\n\n<pre>{tabulate(formatted_history, tablefmt="jira", numalign="left")}</pre>',
        reply_markup=user_kb.show_menu)
    await call.answer()
